class Solution
{
public:
    
    void dfs(vector<vector<int>>& grid , int row , int column)
    {
        if(row < 0 || row >= grid.size() || column < 0 || column >= grid[0].size() || grid[row][column] == 0)
        {
            return;
        }
        
        grid[row][column] = 0;
        
        dfs(grid , row + 1 , column);
        dfs(grid , row - 1 , column);
        dfs(grid , row , column + 1);
        dfs(grid , row , column - 1);
    }
    
    int numEnclaves(vector<vector<int>>& grid)
    {
        for (auto i = 0; i < grid.size(); ++i)
        {
            for (auto j = 0; j < grid[0].size(); ++j)
            {
                if (i * j == 0 || i == grid.size() - 1 || j == grid[i].size() - 1)
                {
                    dfs(grid, i, j);
                }
            }
        }
        
        int count = 0 ;
        
        for(auto x : grid)
        {
            for(auto y : x)
            {
                if(y == 1)
                {
                    count++;
                }
            }
        }
        
        return count;
    }
};