/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution 
{
public:
    int sum = 0;
    int maxdepth = 0;
    bool helper(TreeNode* root , int currentdepth)
    {
        if(root == NULL)
        {
            return true;
        }
        
        bool left = helper(root->left , currentdepth+1);
        bool right = helper(root->right , currentdepth+1);
        
        if(left == true && right == true)
        {
            if(currentdepth > maxdepth)
            {
                sum = 0;
                sum += root->val;
                maxdepth = currentdepth;
            }
            else if(currentdepth == maxdepth)
            {
                sum += root->val;
            }
        }
        return false;
    }
    
    int deepestLeavesSum(TreeNode* root) 
    {
        helper(root , 0);
        return sum;
    }
};